% viewAnalysis_Script.m
%% Load & Parameters
frames = [3000,3100];
[fName,pName] = uigetfile('*.mat','Load Analysis File');
load(fullfile(pName,fName),'saveStruct');

%% Grab Needed Structures
mark = saveStruct.mark;
inst = saveStruct.inst;
label = saveStruct.label;

for k = frames(1):frames(end)
    switch(label(k-1))
        case 0
            % Perform Tracking
            % Template
            tPrev = handles.mark.tCorn(frameNum-1,:);
            if(handles.label(frameNum - 2) == 0)
                tPrev2 = handles.mark.tCorn(frameNum-2,:);
            else
                tPrev2 = tPrev;
            end
            trackPtPrev = handles.inst.trackPt(frameNum-1,:);
            thetaPrev = handles.inst.theta(frameNum-1,:);
            nPrev = handles.mark.nCorn(frameNum-1,:);
            nSize = handles.mark.wStats.nx-1;

            [tCurr,nCurr,maxScore,fitMSE] = track_temp(frameIm,handles.pc,tPrev,...
                                                tPrev2,nPrev,nSize);

            % Boundary Line Estimates
            try
                [r,t,dbl_ais] = track_bLines(frameIm,handles.backIm,...
                                        round(tCurr),tPrev,trackPtPrev,thetaPrev);
            catch ME
                fail_bLine = 1;
            end
    otherwise
        % Perform Detection
        % Template
        [tCurr,nCurr,maxScore,fitMSE] = detection_temp(frameIm,...
            handles.pc,handles.mark.wStats);
        
        % Boundary Lines
        % Determine Last Correct Labeling
        % Use Last Correct to Seed Detection
        lastCorr = find(handles.label(1:frameNum-1) == 0,1,'last');
        tCorn_lastCorr = handles.mark.tCorn(lastCorr,:);
        trackPt_lastCorr = handles.inst.trackPt(lastCorr,:);
        thetaPrev = mean(handles.inst.theta(lastCorr,:));
        trackPtDelta = trackPt_lastCorr - tCorn_lastCorr;
        try
            [r,t,dbl_ais] = track_bLines(frameIm,handles.backIm,...
                round(tCurr),tCurr,tCurr + trackPtDelta,thetaPrev);
            %[r,t,dbl_ais] = detection_bLines(frameIm,handles.backIm,...
            %    round(tCurr),handles.mark.wStats,handles.pc);
        catch ME
            fail_bLine = 1;
        end
end

% Store Results
handles.mark.tCorn(frameNum,:) = round(tCurr);
handles.mark.subT(frameNum,:) = tCurr;
handles.mark.nCorn(frameNum,:) = round(nCurr);

% Template Related Algo Info
handles.algoInfo.nccScore(frameNum,1) = maxScore;
handles.algoInfo.fitMSE(frameNum,1) = fitMSE;

if(fail_bLine == 0)
% Boundary Line Estimates
handles.inst.rho(frameNum,:) = r;
handles.inst.theta(frameNum,:) = t;
halfSize = round((handles.mark.wStats.wSize-1)/2);
handles.inst.trackPt(frameNum,:) = computeTrackPt(r,t,tCurr,halfSize);

% Boundary Line Algo Info
handles.algoInfo.votesLeft(frameNum,:) = dbl_ais.votesLeft;
handles.algoInfo.votesRight(frameNum,:) = dbl_ais.votesRight;
handles.algoInfo.leftNumInliers(frameNum,:) = dbl_ais.leftNumInliers;
handles.algoInfo.leftRefitMSE(frameNum,:) = dbl_ais.leftRefitMSE;
handles.algoInfo.rightNumInliers(frameNum,:) = dbl_ais.rightNumInliers;
handles.algoInfo.rightRefitMSE(frameNum,:) = dbl_ais.rightRefitMSE;
end
end
